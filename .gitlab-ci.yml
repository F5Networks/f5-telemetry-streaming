image: ${ARTIFACTORY_DOCKER_HUB}/node:16

stages:
    - lint
    - atg-shared-checks
    - test
    - build
    - doc
    - deploy
    - functional test
    - teardown
    - publish

# This inherits all the jobs defined in the parent template
# Override variables in this project as needed
include:
# adds atg-shared-checks stage and jobs
# adds atg_shared_checks_result job to test stage
  - project: automation-toolchain/atg-shared-templates
    file: security/base.gitlab-ci.yml

variables:
  FORCE_DOCS_STAGGING:
    value: "false"
    options:
      - "false"
      - "true"
    description: "Force docs to be build and published to GitLab on non-docs branches"
  SKIP_UNIT_TESTS:
    value: "false"
    options:
      - "false"
      - "true"
    description: "Force CI/CD to skip 'test_nodeX' jobs on feature branches"

##############################################################
#                                                            #
# Jobs and commands templates                                #
#                                                            #
##############################################################

.rules_config:
    docs_only:
        rules:
            - if: $CI_COMMIT_BRANCH =~ /^docs/
            - if: $FORCE_DOCS_STAGGING == "true"
    not_docs:
        rules:
            - if: $CI_COMMIT_BRANCH !~ /^docs/
    skip_unit_feat_brach:
        rules:
            - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'develop'
            - if: $SKIP_UNIT_TESTS == 'true'
              when: never
            - !reference [.rules_config, not_docs, rules]


.run_unittest_cmd: &run_unittest_cmd
- npm run test-only

.install_unittest_packages_cmd: &install_unittest_packages_cmd
- nodeFullVer=$(node --version)
- echo "**** Node.js version - $nodeFullVer (bundled with npm@$(npm --version)) ****"
- ver=$(echo $nodeFullVer | cut -d. -f 1)
- installNPM=no
- if [ "$ver" = "v8" ]; then
-   installNPM=6
- elif [ "$ver" = "v10" ] || [ "$ver" = "v12" ] || [ "$ver" = "v14" ]; then
-   installNPM=7
- fi
- if [ "$installNPM" != "no" ]; then
-   echo "Updating npm to '${installNPM}'"
-   npm install --global npm@"${installNPM}"
-   echo "**** Installed npm@$(npm --version)) ****"
- fi
- npm run install-test

.job_definition: &job_definition
    tags:
        - docker-executor
    rules:
        - !reference [.rules_config, not_docs, rules]

.test_job_definition: &test_job_definition
    extends:
        - .job_definition
    stage: test

.harness_deployment_definition: &harness_deployment_definition
    image: ${CICD_CONTAINER_DEPLOY}
    tags:
        - atg-telemetry-streaming-docker
 
.run_unittest:
    extends:
        - .test_job_definition
    script:
        - *install_unittest_packages_cmd
        - *run_unittest_cmd
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

.base_azure: &base_azure
    tags:
        - docker-executor
    only:
        variables:
            - $RUN_AZURE_TESTS == "true"

.deploy_azure: &deploy_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: deploy
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_azure
        paths:
            - deploy_output
            - deploy_output_gov
        expire_in: 4 days

.test_azure: &test_azure
    extends:
        - .base_azure
    stage: functional test
    artifacts:
        name: ${CI_JOB_NAME}_functests_artifacts
        paths:
            - test/artifacts
        when: always
        expire_in: 4 days

# Tear-down Azure environment in separate job, since 'after_script' has a 5min timeout
.teardown_azure: &teardown_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: teardown
    when: always

.base_aws: &base_aws
    tags:
        - docker-executor
    only:
        variables:
            - $RUN_AWS_TESTS == "true"

.deploy_cloud: &deploy_cloud
    image: ${ARTIFACTORY_SERVER}/${DEPLOYMENT_TOOL_IMG}
    stage: deploy

.test_cloud: &test_cloud
    stage: functional test
    artifacts:
        name: ${CI_JOB_NAME}_functests_artifacts
        paths:
            - test/artifacts
            - env_metadata
        when: always
        expire_in: 4 days

.teardown_cloud: &teardown_cloud
    image: ${ARTIFACTORY_SERVER}/${DEPLOYMENT_TOOL_IMG}
    stage: teardown
    when: always

##############################################################
#                                                            #
# Jobs                                                       #
#                                                            #
##############################################################

lint:
    extends:
        - .test_job_definition
    image: ${ARTIFACTORY_DOCKER_HUB}/node:14
    stage: lint
    script:
        - *install_unittest_packages_cmd
        - npm run lint

# BIG-IP 14.1+
test_node8:
    extends:
        - .run_unittest
    image: ${ARTIFACTORY_DOCKER_HUB}/node:8.11.1
    rules:
        - !reference [.rules_config, skip_unit_feat_brach, rules]

# packages audit
npm_audit:
    image: ${ARTIFACTORY_DOCKER_HUB}/node:16
    extends:
        - .test_job_definition
    allow_failure: true
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install node modules
        - *install_unittest_packages_cmd
        # npm list - ignore errors, interested in audit errors only
        - npm list --json || echo ""
        - npm outdated || echo ""
        # npm audit - install includes audit, but perform specific check and fail if needed
        - audit_report=$(npm audit --production --json) || echo ""
        - echo "$audit_report"
        - vulnerabilities=$(echo $audit_report | jq .vulnerabilities | jq length)
        - if [ $vulnerabilities -ne 0 ]; then echo 'ERROR! vulnerabilities exist'; exit 1; fi

coverage:
    # bind to 14.1+ version to test @grppc-js and OpenTelemetry
    image: ${ARTIFACTORY_DOCKER_HUB}/node:8.11.1
    extends:
        - .test_job_definition
    script:
        - *install_unittest_packages_cmd
        - npm test
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_coverage
        paths:
            - coverage
    rules:
        - !reference [.rules_config, skip_unit_feat_brach, rules]

build_rpm:
    image: ${ATG_ARTIFACTORY_PUBLISH_URL}/${ATG_ARTIFACTORY_DOCKER_REPO}/f5-telemetry-streaming-rpm-builder-image:v1.2
    extends:
        - .job_definition
    stage: build
    script:
        - npm run build
    tags:
        - cm-official-docker-executor
    artifacts:
        name: f5-telemetry-$CI_BUILD_REF
        paths:
            - dist
        expire_in: 1 month

build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    needs: []
    script:
        # create 'dist' folder because it probably not exists yet
        - mkdir -p dist
        - node scripts/schema-build.js
        # - node scripts/schema-check.js
        - node scripts/schema-to-rst.js
        - node scripts/poller-default-output-doc-gen.js
        - if [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
        -   rm -rf docs/_templates
        - fi
        - make html
        - vale --glob='*.rst' .
        - make linkcheck
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - docs/_build/html
        expire_in: 1 month
    rules:
        - !reference [.rules_config, docs_only, rules]

##############################################################
# BEGIN VIO                                                  #
##############################################################

deploy_env:
    extends:
        - .harness_deployment_definition
    stage: deploy
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_bigip.harness_info
        paths:
            - ${CI_PROJECT_DIR}/harness_facts_flat.json
        when: on_success
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"
    script:
        - $SHELL ./scripts/functional_testing/vio/setup.sh

test_functional:
    stage: functional test
    # troubleshooting functional test failures typically requires looking at logs, one of which is
    # the restnoded log that is captured by the functional tests.  This saves off the folder
    # containing that log as an artifact to speed up the troubleshooting process
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_functests_artifacts
        paths:
            - test/artifacts
        when: always
        expire_in: 4 days
    tags:
        - atg-telemetry-streaming-docker
    only:
        variables:
            # enable this job
            - $RUN_FUNCTIONAL_TESTS == "true"
    script:
        - if [ -z "${TEST_HARNESS_FILE}" ]; then
        -     export TEST_HARNESS_FILE=${CI_PROJECT_DIR}/harness_facts_flat.json
        - fi
        - echo "Harness data - ${TEST_HARNESS_FILE}"
        - ls ./dist -ls
        # really only need dev dependencies
        - *install_unittest_packages_cmd
        - npm run test-functional

# should be executed manually to remove the harness
teardown_env:
    extends:
        - .harness_deployment_definition
    stage: teardown
    when: manual
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"
    script:
        - $SHELL ./scripts/functional_testing/vio/teardown.sh

##############################################################
# END VIO                                                    #
##############################################################
##############################################################
# BEGIN CLOUD                                                #
##############################################################

# Azure Public
deploy_env_azure:
    extends:
        - .deploy_azure
    script:
        - mkdir -p './deploy_output'
        - source ./scripts/functional_testing/azure/deploy_env.sh

test_functional_azure:
    extends:
        - .test_azure
    script:
        - source ./deploy_output/azure.sh
        - echo $AZURE_VM_HOSTNAME
        - echo $AZURE_VM_IP
        - *install_unittest_packages_cmd
        - npm run test-functional-cloud-azure
    needs:
        - build_rpm
        - deploy_env_azure

teardown_env_azure:
    extends:
        - .teardown_azure
    script:
        - source ./scripts/functional_testing/azure/teardown_env.sh

# Azure Gov
deploy_env_azure_gov:
    extends:
        - .deploy_azure
    script:
        - mkdir -p './deploy_output_gov'
        - source ./scripts/functional_testing/azure/deploy_env.sh 'gov'

test_functional_azure_gov:
    extends:
        - .test_azure
    script:
        - source ./deploy_output_gov/azure_gov.sh
        - echo $AZURE_VM_HOSTNAME
        - echo $AZURE_VM_IP
        - *install_unittest_packages_cmd
        - npm run test-functional-cloud-azure
    needs:
        - build_rpm
        - deploy_env_azure_gov

teardown_env_azure_gov:
    extends:
        - .teardown_azure
    script:
        - source ./scripts/functional_testing/azure/teardown_env.sh 'gov'

deploy_env_aws:
    extends:
        - .base_aws
        - .deploy_cloud
    script:
        - source ./scripts/functional_testing/aws/deploy_env.sh
    artifacts:
        paths:
            - env_metadata
        when: always

test_functional_aws:
    extends:
        - .base_aws
        - .test_cloud
    stage: functional test
    script:
        - source ./env_metadata/aws.sh
        - *install_unittest_packages_cmd
        - npm run test-functional-cloud-aws

teardown_env_aws:
    extends:
        - .base_aws
        - .teardown_cloud
    script:
        - source ./scripts/functional_testing/aws/teardown_env.sh

##############################################################
# END CLOUD                                                  #
##############################################################

# Publish docs to internal pages - note: this job name MUST be 'pages'
pages:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    needs: [build_docs]
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    variables:
        NODE_OPTIONS: "--dns-result-order=ipv4first"
    tags:
        - cm-official-docker-executor
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        #### place public facing docs under: /public-docs ####
        - PUBLIC_DOCS=${PUBLIC_DIR}/public-docs
        - mkdir -p ${PUBLIC_DOCS}
        - cp -R docs/_build/html/* ${PUBLIC_DOCS}
    artifacts:
        paths:
            - public
    rules:
        - !reference [.rules_config, docs_only, rules]

# Publish docs to clouddocs.f5.com
publish_docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    needs: [build_docs]
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    only:
        # fill in desired release branch name to add deployment from a branch: currently *docs-latest*
        - docs-latest@automation-toolchain/f5-telemetry
    tags:
        - cm-official-docker-executor
    script:
        # Uncomment and set to create desired version format
        - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
        - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
