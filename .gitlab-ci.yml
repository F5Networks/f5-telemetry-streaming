image: node:8

stages:
    - lint
    - test
    - build
    - doc
    - deploy
    - functional test
    - teardown
    - publish

##############################################################
#                                                            #
# Jobs and commands templates                                 #
#                                                            #
##############################################################
.install_unittest_packages_cmd: &install_unittest_packages_cmd
- nodeFullVer=$(node --version)
- echo "Node.js version - $nodeFullVer"
- ver=$(echo $nodeFullVer | head -c 3)
- if [[ "$ver" == "v4." ]]; then
-   npm install --global npm@5.10.0
-   npm run install-test
-   npm install mocha@5.2.0 --no-optional
-   echo "**** Using mocha 5.2.0 ****"
- elif [[ "$ver" == "v6." ]]; then
-   npm run install-test
-   npm install mocha@6.2.2 --no-optional
-   echo "**** Using mocha 6.2.2 ****"
- else
-   npm run install-test
- fi

.run_unittest_cmd: &run_unittest_cmd
- npm run test-only

.job_definition: &job_definition
    tags:
        - docker-executor

.test_job_definition: &test_job_definition
    extends:
        - .job_definition
    stage: test

.harness_deployment_definition: &harness_deployment_definition
    image: ${CICD_CONTAINER_DEPLOY}
    tags:
        - cm-official-docker-executor
 
.run_unittest:
    extends:
        - .test_job_definition
    script:
        - *install_unittest_packages_cmd
        - *run_unittest_cmd
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

.base_azure: &base_azure
    tags:
        - docker-executor
    only:
        variables:
            - $RUN_AZURE_TESTS == "true"

.deploy_azure: &deploy_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: deploy
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_azure
        paths:
            - deploy_output
            - deploy_output_gov
        expire_in: 4 days

.test_azure: &test_azure
    extends:
        - .base_azure
    stage: functional test
    artifacts:
        name: ${CI_JOB_NAME}_functests_artifacts
        paths:
            - test/artifacts
        when: always
        expire_in: 4 days

# Tear-down Azure environment in separate job, since 'after_script' has a 5min timeout
.teardown_azure: &teardown_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: teardown
    when: always

.base_aws: &base_aws
    tags:
        - docker-executor
    only:
        variables:
            - $RUN_AWS_TESTS == "true"

.deploy_cloud: &deploy_cloud
    image: ${ARTIFACTORY_SERVER}/${DEPLOYMENT_TOOL_IMG}
    stage: deploy

.test_cloud: &test_cloud
    stage: functional test
    artifacts:
        name: ${CI_JOB_NAME}_functests_artifacts
        paths:
            - test/artifacts
            - env_metadata
        when: always
        expire_in: 4 days

.teardown_cloud: &teardown_cloud
    image: ${ARTIFACTORY_SERVER}/${DEPLOYMENT_TOOL_IMG}
    stage: teardown
    when: always

##############################################################
#                                                            #
# Jobs                                                       #
#                                                            #
##############################################################

lint:
    extends:
        - .test_job_definition
    image: node:8
    stage: lint
    script:
        - *install_unittest_packages_cmd
        - npm run lint

# BIG-IP 13.x and BIG-IP 14.0, unittests only (without coverage check)
test_node4:
    extends:
        - .run_unittest
    image: node:4

# just in case, unittests only (without coverage check)
test_node6:
    extends:
        - .run_unittest
    image: node:6

# BIG-IP 14.1+, unittests only (without coverage check)
test_node8:
    extends:
        - .run_unittest
    image: node:8

# mostly for containers, unittests only (without coverage check)
test_node_latest:
    extends:
        - .run_unittest
    image: node:latest

# packages audit
npm_audit:
    extends:
        - .test_job_definition
    allow_failure: true
    script:
        # install jq
        - apt-get update
        - apt-get install -y jq
        # install node modules
        - *install_unittest_packages_cmd
        - npm list --json
        # npm audit - install includes audit, but perform specific check and fail if needed
        - audit_report=$(npm audit --json) || echo ""
        - echo "$audit_report"
        - actions=$(echo $audit_report | jq .actions | jq length)
        - if [ $actions -ne 0 ]; then echo 'ERROR! vulnerabilities exist'; exit 1; fi

# run tests and check code coverage
coverage:
    extends:
        - .test_job_definition
    script:
        - *install_unittest_packages_cmd
        # run tests with coverage report
        - npm test
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_coverage
        paths:
            - coverage

build_rpm:
    image: f5devcentral/containthedocs:rpmbuild
    stage: build
    script:
        - echo 'CI BUILD'
          # build RPM
        - npm install --global npm@5.10.0
        - npm run build
    tags:
        - cm-official-docker-executor
    artifacts:
        name: f5-telemetry-$CI_BUILD_REF
        paths:
            - dist
        expire_in: 1 month

build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    script:
        # create 'dist' folder because it probably not exists yet
        - mkdir -p dist
        - node scripts/schema-build.js
        # - node scripts/schema-check.js
        - node scripts/schema-to-rst.js
        - if [ "$CI_COMMIT_REF_NAME" = "docs-staging" ] || [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
        -   rm -rf docs/_templates
        - fi
        - make html
        - vale --glob='*.{md,rst}' .
        #  - make linkcheck
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - docs/_build/html
        expire_in: 1 month

##############################################################
# BEGIN VIO                                                  #
##############################################################

deploy_env:
    extends:
        - .harness_deployment_definition
    stage: deploy
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_bigip.harness_info
        paths:
            - ${CI_PROJECT_DIR}/harness_facts_flat.json
        when: on_success
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"
    script:
        - $SHELL ./scripts/functional_testing/vio/setup.sh

test_functional:
    stage: functional test
    # troubleshooting functional test failures typically requires looking at logs, one of which is
    # the restnoded log that is captured by the functional tests.  This saves off the folder
    # containing that log as an artifact to speed up the troubleshooting process
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_functests_artifacts
        paths:
            - test/artifacts
        when: always
        expire_in: 4 days
    tags:
        - cm-official-docker-executor
    only:
        variables:
            # enable this job
            - $RUN_FUNCTIONAL_TESTS == "true"
    script:
        - export TEST_HARNESS_FILE=${CI_PROJECT_DIR}/harness_facts_flat.json
        - ls ./dist -ls
        # really only need dev dependencies
        - *install_unittest_packages_cmd
        - npm install mocha@7.1.0
        - npm run test-functional

# should be executed manually to remove the harness
teardown_env:
    extends:
        - .harness_deployment_definition
    stage: teardown
    when: manual
    only:
        variables:
            - $REQ_DEVICE_PIPELINE == "true"
    script:
        - $SHELL ./scripts/functional_testing/vio/teardown.sh

##############################################################
# END VIO                                                    #
##############################################################


##############################################################
# BEGIN CLOUD                                                #
##############################################################

# Azure Public
deploy_env_azure:
    extends:
        - .deploy_azure
    script:
        - mkdir -p './deploy_output'
        - source ./scripts/functional_testing/azure/deploy_env.sh

test_functional_azure:
    extends:
        - .test_azure
    script:
        - source ./deploy_output/azure.sh
        - echo $AZURE_VM_HOSTNAME
        - echo $AZURE_VM_IP
        - *install_unittest_packages_cmd
        - npm install mocha@7.1.0
        - npm run test-functional-cloud-azure
    needs:
        - build_rpm
        - deploy_env_azure

teardown_env_azure:
    extends:
        - .teardown_azure
    script:
        - source ./scripts/functional_testing/azure/teardown_env.sh


# Azure Gov
deploy_env_azure_gov:
    extends:
        - .deploy_azure
    script:
        - mkdir -p './deploy_output_gov'
        - source ./scripts/functional_testing/azure/deploy_env.sh 'gov'

test_functional_azure_gov:
    extends:
        - .test_azure
    script:
        - source ./deploy_output_gov/azure_gov.sh
        - echo $AZURE_VM_HOSTNAME
        - echo $AZURE_VM_IP
        - *install_unittest_packages_cmd
        - npm install mocha@7.1.0
        - npm run test-functional-cloud-azure
    needs:
        - build_rpm
        - deploy_env_azure_gov


teardown_env_azure_gov:
    extends:
        - .teardown_azure
    script:
        - source ./scripts/functional_testing/azure/teardown_env.sh 'gov'


deploy_env_aws:
    extends:
        - .base_aws
        - .deploy_cloud
    script:
        - source ./scripts/functional_testing/aws/deploy_env.sh
    artifacts:
        paths:
            - env_metadata
        when: always

test_functional_aws:
    extends:
        - .base_aws
        - .test_cloud
    stage: functional test
    script:
        - source ./env_metadata/aws.sh
        - *install_unittest_packages_cmd
        - npm install mocha@7.1.0
        - npm run test-functional-cloud-aws

teardown_env_aws:
    extends:
        - .base_aws
        - .teardown_cloud
    script:
        - source ./scripts/functional_testing/aws/teardown_env.sh

##############################################################
# END CLOUD                                                  #
##############################################################

# Publish to internal artifactory
# Note: Will publish when new tags are pushed and use the current build in dist directory
# with the assumption being the rpm has been updated. However even if it hasn't the upload
# will simply update the existing rpm version/release in artifactory
publish_rpm_to_artifactory:
    stage: publish
    only:
        - tags
    tags:
        - docker-executor
    script:
        - source ./scripts/build/publishRpm.sh

# Publish docs to internal pages - note: this job name MUST be 'pages'
pages:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    tags:
        - cm-official-docker-executor
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        #### place public facing docs under: /public-docs ####
        - PUBLIC_DOCS=${PUBLIC_DIR}/public-docs
        - mkdir -p ${PUBLIC_DOCS}
        - cp -R docs/_build/html/* ${PUBLIC_DOCS}
        #### place code coverage docs under: /coverage-docs ####
        - COVERAGE_DOCS=${PUBLIC_DIR}/coverage-docs
        - mkdir -p ${COVERAGE_DOCS}
        - cp -R coverage/* ${COVERAGE_DOCS}
        #### place code contribution docs (mainly for presentation) under: /contribute-docs ####
        - CONTRIBUTE_DOCS=${PUBLIC_DIR}/contribute-docs
        - CONTRIBUTE_DIR=contributing
        # install presentation site dependencies
        - cd ${CONTRIBUTE_DIR} && npm install && cd ..
        - mkdir -p ${CONTRIBUTE_DOCS}
        - cp -R ${CONTRIBUTE_DIR}/* ${CONTRIBUTE_DOCS}
        # make relative links absolute - this could be better...
        # ![diagram](../test/README.md) -> ![diagram](https://base.url/../test/README.md)
        - BASE_URL_FOR_LINKS=${CI_PROJECT_URL}/tree/${CI_COMMIT_REF_NAME}/${CONTRIBUTE_DIR}/
        - README=${CONTRIBUTE_DOCS}/README.md
        # make absolute URL(s) for relative URL(s) outside current directory '../'
        - sed -i -E 's/\[.*\]\(\.\./&SED_TEMP/' ${README} && sed -i "s|..SED_TEMP|${BASE_URL_FOR_LINKS}..|" ${README}
    artifacts:
        paths:
            - public
    only:
        # only update on designated, stable branch
        - develop
        - doc-release-branch

# Publish docs to clouddocs.f5networks.net
publish_docs_to_staging:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    environment:
        name: staging
        url: https://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
    tags:
        - cm-official-docker-executor
    only:
        - docs-staging@automation-toolchain/f5-telemetry
    script:
        - aws s3 sync docs/_build/html s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5networks.net/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest

# Publish docs to clouddocs.f5.com
publish_docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    only:
        # fill in desired release branch name to add deployment from a branch: currently *docs-latest*
        - docs-latest@automation-toolchain/f5-telemetry
    tags:
        - cm-official-docker-executor
    script:
        # Uncomment and set to create desired version format
        - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
