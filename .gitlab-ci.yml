

stages:
    - lint
    - atg-shared-checks
    - test
    - build
    - doc
    - deploy
    - functional test
    - teardown
    - publish

# This inherits all the jobs defined in the parent template
# Override variables in this project as needed
include:
# adds atg-shared-checks stage and jobs
# adds atg_shared_checks_result job to test stage
  - project: automation-toolchain/atg-shared-templates
    file: security/base.gitlab-ci.yml
    ref: v1.0.4


##############################################################
#                                                            #
# Jobs and commands templates                                 #
#                                                            #
##############################################################
.install_unittest_packages_cmd: &install_unittest_packages_cmd
- nodeFullVer=$(node --version)
- echo "Node.js version - $nodeFullVer"
- ver=$(echo $nodeFullVer | head -c 3)
- if [[ "$ver" == "v4." ]]; then
-   npm install --global npm@5.10.0
-   npm run install-test
-   npm install mocha@5.2.0 --no-optional
-   echo "**** Using mocha 5.2.0 ****"
- elif [[ "$ver" == "v6." ]]; then
-   npm run install-test
-   npm install mocha@6.2.2 --no-optional
-   echo "**** Using mocha 6.2.2 ****"
- else
-   npm run install-test
- fi

.run_unittest_cmd: &run_unittest_cmd
- npm run test-only

.job_definition: &job_definition
    tags:
        - docker-executor

.test_job_definition: &test_job_definition
    extends:
        - .job_definition
    stage: test

.harness_deployment_definition: &harness_deployment_definition
    image: ${CICD_CONTAINER_DEPLOY}
    tags:
        - atg-ts-firehose-docker
 
.run_unittest:
    extends:
        - .test_job_definition
    script:
        - *install_unittest_packages_cmd
        - *run_unittest_cmd
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_unittests_artifacts
        paths:
            - test/artifacts
        when: on_failure
        expire_in: 3 days

.base_azure: &base_azure
    tags:
        - docker-executor
    only:
        variables:
            - $RUN_AZURE_TESTS == "true"

.deploy_azure: &deploy_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: deploy
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_azure
        paths:
            - deploy_output
            - deploy_output_gov
        expire_in: 4 days

.test_azure: &test_azure
    extends:
        - .base_azure
    stage: functional test
    artifacts:
        name: ${CI_JOB_NAME}_functests_artifacts
        paths:
            - test/artifacts
        when: always
        expire_in: 4 days

# Tear-down Azure environment in separate job, since 'after_script' has a 5min timeout
.teardown_azure: &teardown_azure
    extends:
        - .base_azure
    image: mcr.microsoft.com/azure-cli
    stage: teardown
    when: always


##############################################################
#                                                            #
# Jobs and commands templates                                 #
#                                                            #
##############################################################


build_docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    script:
        # create 'dist' folder because it probably not exists yet
        - mkdir -p dist
        - node scripts/schema-build.js
        # - node scripts/schema-check.js
        - node scripts/schema-to-rst.js
        - node scripts/poller-default-output-doc-gen.js
        - if [ "$CI_COMMIT_REF_NAME" = "docs-staging" ] || [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
        -   rm -rf docs/_templates
        - fi
        - make html
        - vale --glob='*.{md,rst}' .
        #  - make linkcheck
    tags:
        - docker-executor
    artifacts:
        name: docs
        paths:
            - docs/_build/html
        expire_in: 1 month

##############################################################
# BEGIN VIO                                                  #
##############################################################




# Publish docs to clouddocs.f5.com
publish_docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: doc
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
    only:
        # fill in desired release branch name to add deployment from a branch: currently *docs-latest*
        - docs-latest@automation-toolchain/f5-telemetry
    tags:
        - cm-official-docker-executor
    script:
        # Uncomment and set to create desired version format
        - aws s3 sync docs/_build/html s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/latest
        # - aws s3 cp versions.json s3://clouddocs.f5.com/products/extensions/f5-telemetry-streaming/versions.json
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-telemetry-streaming/latest
