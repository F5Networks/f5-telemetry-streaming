{
    "$id": "base_schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Telemetry Streaming",
    "description": "",
    "type": "object",
    "definitions": {
        "enable": {
            "title": "Enable",
            "description": "This property can be used to enable/disable the poller/listener" ,
            "type": "boolean"
        },
        "trace": {
            "title": "Trace",
            "description": "Enables data dumping to file. Boolean uses pre-defined file location, however value could be a string which contains path to a specific file instead" ,
            "type": ["boolean", "string"]
        },
        "secret": {
            "title": "Passphrase (secret)",
            "description": "" ,
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "description": "Telemetry streaming secret class",
                    "type": "string",
                    "enum": [ "Secret" ],
                    "default": "Secret"
               },
                "cipherText": {
                    "title": "Cipher Text: this contains a secret to encrypt",
                    "type": "string"
                },
                "environmentVar": {
                    "title": "Environment Variable: this contains the named env var where the secret resides",
                    "type": "string"
                },
                "protected": {
                    "$comment": "Meta property primarily used to determine if 'cipherText' needs to be encrypted",
                    "title": "Protected",
                    "type": "string",
                    "enum": [ "plainText", "plainBase64", "SecureVault" ],
                    "default": "plainText"
                }
            },
            "oneOf": [
                { "required": [ "cipherText" ] },
                { "required": [ "environmentVar" ] }
            ],
            "f5secret": true
        },
        "username": {
            "$comment": "Common field for username to use everywhere in scheme",
            "title": "Username",
            "type": "string"
        },
        "stringOrSecret": {
            "allOf": [
                {
                    "if": { "type": "string" },
                    "then": {},
                    "else": {}
                },
                {
                    "if": { "type": "object" },
                    "then": { "$ref": "base_schema.json#/definitions/secret" },
                    "else": {}
                }
            ]
        },
        "constants": {
            "title": "Constants",
            "description": "" ,
            "type": "object",
            "properties": {
                "class": {
                    "title": "Class",
                    "description": "Telemetry streaming constants class",
                    "type": "string",
                    "enum": [ "Constants" ]
               }
            },
            "additionalProperties": true
        },
        "tag": {
            "$comment": "Defaults do not get applied for $ref objects, so place defaults alongside instead.",
            "title": "Tag",
            "description": "" ,
            "type": "object",
            "properties": {
                "tenant": {
                    "title": "Tenant tag",
                    "type": "string"
                },
                "application": {
                    "title": "Application tag",
                    "type": "string"
                }
            },
            "additionalProperties": true
        },
        "action": {
            "title": "Action",
            "description": "An action to be done on system data or on event data.",
            "type": "object",
            "properties": {
                "enable": {
                    "title": "Enable",
                    "description": "Whether to enable this action in the declaration or not.",
                    "type": "boolean",
                    "default": true
                },
                "setTag": {
                    "title": "Set Tag",
                    "description": "The tag values to be added.",
                    "type": "object",
                    "additionalProperties": true
                },
                "ifAllMatch": {
                    "title": "If All Match",
                    "description": "The conditions that will be checked against. All must be true.",
                    "type": "object",
                    "additionalProperties": true
                },
                "ifAnyMatch": {
                    "title": "If Any Match",
                    "description": "An array of ifAllMatch objects. Any individual ifAllMatch object may match, but each condition within an ifAllMatch object must be true",
                    "type": "array",
                    "additionalProperties": false
                },
                "includeData": {
                    "title": "Include Data",
                    "description": "The data fields to include in the output",
                    "type": "object",
                    "additionalProperties": false
                },
                "excludeData": {
                    "title": "Exclude Data",
                    "description": "The data fields to exclude in the output",
                    "type": "object",
                    "additionalProperties": false
                },
                "locations": {
                    "title": "Location",
                    "description": "The location(s) to apply the action.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/location"
                    }
                }
            },
            "dependencies": {
                "includeData": {
                    "allOf": [
                        {
                            "required": ["locations"]
                        },
                        {
                            "not": { "required": ["setTag"] }
                        },
                        {
                            "not": { "required": ["excludeData"] }
                        }
                    ]
                },
                "excludeData": {
                    "allOf": [
                        {
                            "required": ["locations"]
                        },
                        {
                            "not": { "required": ["setTag"] }
                        },
                        {
                            "not": { "required": ["includeData"] }
                        }
                    ]
                },
                "setTag": {
                    "allOf": [
                        {
                            "not": { "required": ["includeData"] }
                        },
                        {
                            "not": { "required": ["excludeData"] }
                        }
                    ]
                },
                "ifAnyMatch": {
                    "allOf": [
                        {
                            "not": { "required": ["ifAllMatch"] }
                        }
                    ]
                },
                "ifAllMatch": {
                    "allOf": [
                        {
                            "not": { "required": ["ifAnyMatch"] }
                        }
                    ]
                }
            },
            "additionalProperties": false,
            "if": {
                "required": [ "setTag" ],
                "properties": {
                    "setTag": {
                        "anyOf": [
                            {
                                "additionalProperties": {
                                    "const": "`A`"
                                }
                            },
                            {
                                "additionalProperties": {
                                    "const": "`T`"
                                }
                            }
                        ]
                    }
                }
            },
            "then": {
                "not": {
                    "required": ["locations"]
                }
            }
        },
        "location": {
            "title": "Location",
            "description": "Used to specify a location in TS data. Use boolean type with value true to specify the location.",
            "oneOf": [
                {
                    "type": "boolean",
                    "const": true
                },
                {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/location"
                    }
                }
            ]
        },
        "match": {
            "$comment": "Defaults do not get applied for $ref objects, so place defaults alongside instead.",
            "title": "Pattern to filter data",
            "description": "",
            "type": "string"
        },
        "enableHostConnectivityCheck": {
            "$comment": "This property can be used to enable/disable the host connectivity check in configurations where this is in effect",
            "title": "Host",
            "description": "" ,
            "type": "boolean"
        },
        "allowSelfSignedCert": {
            "$comment": "This property can be used by consumers, system pollers to enable/disable SSL Cert check",
            "title": "Allow Self-Signed Certificate",
            "description": "" ,
            "type": "boolean"
        },
        "host": {
            "$comment": "This property can be used by consumers, system pollers",
            "title": "Host",
            "description": "" ,
            "type": "string",
            "anyOf": [
                { "format": "ipv4" },
                { "format": "ipv6" },
                { "format": "hostname" }
            ],
            "hostConnectivityCheck": true
        },
        "port": {
            "title": "Port",
            "description": "" ,
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
        },
        "protocol": {
            "title": "Protocol",
            "description": "" ,
            "type": "string",
            "enum": [ "http", "https" ]
        },
        "proxy": {
            "title": "Proxy Configuration",
            "description": "",
            "type": "object",
            "dependencies": {
                "passphrase": [ "username" ]
            },
            "required": [ "host" ],
            "properties": {
                "host": {
                    "$ref": "#/definitions/host"
                },
                "port": {
                    "default": 80,
                    "allOf": [
                        {
                            "$ref": "#/definitions/port"
                        }
                    ]
                },
                "protocol": {
                    "default": "http",
                    "allOf": [
                        {
                            "$ref": "#/definitions/protocol"
                        }
                    ]
                },
                "enableHostConnectivityCheck": {
                    "$ref": "#/definitions/enableHostConnectivityCheck"
                },
                "allowSelfSignedCert": {
                    "$ref": "#/definitions/allowSelfSignedCert"
                },
                "username": {
                    "$ref": "#/definitions/username"
                },
                "passphrase": {
                    "$ref": "#/definitions/secret"
                }
            },
            "additionalProperties": false
        }
    },
    "properties": {
       "class": {
            "title": "Class",
            "description": "Telemetry streaming top level class",
            "type": "string",
            "enum": [ "Telemetry" ]
       },
       "schemaVersion": {
            "title": "Schema version",
            "description": "Version of ADC Declaration schema this declaration uses",
            "type": "string",
            "$comment": "IMPORTANT: In enum array, please put current schema version first, oldest-supported version last.  Keep enum array sorted most-recent-first.",
            "enum": [ "1.15.0", "1.14.0",  "1.13.0", "1.12.0", "1.11.0", "1.10.0", "1.9.0", "1.8.0", "1.7.0", "1.6.0", "1.5.0", "1.4.0", "1.3.0", "1.2.0", "1.1.0", "1.0.0", "0.9.0" ],
            "default": "1.15.0"
       },
       "$schema": {
            "title": "Schema",
            "description": "",
            "type": "string"
        }
    },
    "additionalProperties": {
        "$comment": "AJV does not resolve defaults inside oneOf/anyOf, so instead use allOf.  Any schema refs should also use allOf with an if/then/else on class",
        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "enum": [
                    "Telemetry_System",
                    "Telemetry_System_Poller",
                    "Telemetry_Listener",
                    "Telemetry_Consumer",
                    "Telemetry_Pull_Consumer",
                    "Telemetry_iHealth_Poller",
                    "Telemetry_Endpoints",
                    "Controls",
                    "Shared"
                ]
            }
        },    
        "allOf": [
            {
                "$ref": "system_schema.json#"
            },
            {
                "$ref": "system_poller_schema.json#"
            },
            {
                "$ref": "listener_schema.json#"
            },
            {
                "$ref": "consumer_schema.json#"
            },
            {
                "$ref": "pull_consumer_schema.json#"
            },
            {
                "$ref": "ihealth_poller_schema.json#"
            },
            {
                "$ref": "endpoints_schema.json#"
            },
            {
                "$ref": "controls_schema.json#"
            },
            {
                "$ref": "shared_schema.json#"
            }
        ]
    },
    "required": [
        "class"
    ]
}