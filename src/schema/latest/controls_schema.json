{
    "$id": "controls_schema.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Telemetry Streaming Controls schema",
    "description": "",
    "type": "object",
    "allOf": [
        {
            "if": { "properties": { "class": { "const": "Controls" } } },
            "then": {
                "required": [
                    "class"
                ],
                "properties": {
                    "class": {
                        "title": "Class",
                        "description": "Telemetry Streaming Controls class",
                        "type": "string",
                        "enum": [ "Controls" ]
                    },
                    "logLevel": {
                        "title": "Logging Level",
                        "description": "",
                        "type": "string",
                        "default": "info",
                        "enum": [ 
                            "verbose",
                            "debug",
                            "info",
                            "error"
                        ] 
                    },
                    "debug": {
                        "title": "Enable debug mode",
                        "description": "",
                        "type": "boolean",
                        "default": false
                    },
                    "memoryThresholdPercent": {
                        "title": "Memory Usage Threshold (Percentage of Available Process Memory)",
                        "description": "Once memory usage reaches this value, processing may temporarily cease until levels return below threshold. Defaults to 90%",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "default": 90
                    },
                    "listenerMode": {
                        "title": "Event Listener events parsing mode",
                        "description": "Event Listener events parsing mode. \"buffer\" is more performant but under the high memory usage events may result in OOM. \"string\" is less performant but more chance to have lower RSS",
                        "type": "string",
                        "enum": [
                            "buffer",
                            "string"
                        ]
                    },
                    "listenerStrategy": {
                        "title": "Event Listener events buffering strategy due high memory usage events",
                        "description": "Event Listener events buffering strategy. \"drop\" drops all new chunks of data, but keeps pending data to process - less memory usage but loosing data. \"ring\" keeps buffering data by overriding peding data - higher memory usage but less chance to get data lost.",
                        "type": "string",
                        "enum": [
                            "drop",
                            "ring"
                        ]
                    }
                },
                "additionalProperties": false
            },
            "else": {}
        }
    ]
}