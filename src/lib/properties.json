{
    "stats": {
        "system": {
            "structure": { "folder": true }
        },
        "hostname": {
            "key": "deviceInfo::hostname",
            "structure": { "parentKey": "system" },
            "normalize": null,
            "normalization": [
                {
                    "convertArrayToMap": null
                },
                {
                    "filterKeys": null
                },
                {
                    "renameKeys": null
                },
                {
                    "runFunctions": null
                },
                {
                    "addKeysByTag": null
                }
            ]
        },
        "machineId": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::machineId"
        },
        "version": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::version"
        },
        "versionBuild": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::build"
        },
        "location": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/device::items",
            "normalization": [
                {
                    "runFunctions": [{ "name": "normalizeMACAddress", "args": { "properties": ["baseMac"] } } ]
                },
                {
                    "convertArrayToMap": { "keyName": "baseMac" }, "useCurrentData": true, "keepKey": true
                },
                {
                    "runFunctions": [{ "name": "getValue", "args": { "path": ["{{ BASE_MAC_ADDR }}", "location" ] } } ]
                }
            ]
        },
        "description": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/device::items",
            "normalization": [
                {
                    "runFunctions": [{ "name": "normalizeMACAddress", "args": { "properties": ["baseMac"] } } ]
                },
                {
                    "convertArrayToMap": { "keyName": "baseMac" }, "useCurrentData": true, "keepKey": true
                },
                {
                    "runFunctions": [{ "name": "getValue", "args": { "path": ["{{ BASE_MAC_ADDR }}", "description" ] } } ]
                }
            ]
        },
        "marketingName": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::platformMarketingName"
        },
        "platformId": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::platform"
        },
        "chassisId": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::chassisSerialNumber"
        },
        "baseMac": {
            "structure": { "parentKey": "system" },
            "key": "deviceInfo::baseMac",
            "normalization": [
                {
                    "runFunctions": [{ "name": "normalizeMACAddress" }]
                }
            ]
        },
        "callBackUrl": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/sys/management-ip::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "name" }
                },
                {
                    "runFunctions": [{ "name": "getFirstKey", "args": { "splitOnValue": "/", "keyPrefix": "https://" } }]
                }
            ]
        },
        "configReady": {
            "structure": { "parentKey": "system" },
            "if": {
                "deviceVersionGreaterOrEqual": "13.1"
            },
            "then": {
                "key": "/mgmt/tm/sys/ready::sys/ready/0::configReady"
            },
            "else": {
                "disabled": true
            }
        },
        "licenseReady": {
            "structure": { "parentKey": "system" },
            "if": {
                "deviceVersionGreaterOrEqual": "13.1"
            },
            "then": {
                "key": "/mgmt/tm/sys/ready::sys/ready/0::licenseReady"
            },
            "else": {
                "disabled": true
            }
        },
        "provisionReady": {
            "structure": { "parentKey": "system" },
            "if": {
                "deviceVersionGreaterOrEqual": "13.1"
            },
            "then": {
                "key": "/mgmt/tm/sys/ready::sys/ready/0::provisionReady"
            },
            "else": {
                "disabled": true
            }
        },
        "syncMode": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/sync-status::cm/sync-status/0::mode"
        },
        "syncColor": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/sync-status::cm/sync-status/0::color"
        },
        "syncStatus": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/sync-status::cm/sync-status/0::status"
        },
        "syncSummary": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/sync-status::cm/sync-status/0::summary"
        },
        "failoverStatus": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/failover-status::cm/failover-status/0::status"
        },
        "failoverColor": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/cm/failover-status::cm/failover-status/0::color"
        },
        "systemTimestamp": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/sys/clock::sys/clock/0::fullDate"
        },
        "cpu": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/sys/host-info",
            "normalization": [
                {
                    "runFunctions": [
                        { "name": "restructureHostCpuInfo", "args": { "keyPattern": "^sys/host-info/\\d+::^sys/hostInfo/\\d+/cpuInfo" } },
                        { "name": "getAverage", "args": { "keyWithValue": "oneMinAvgSystem" } }
                    ]
                }
            ],
            "comment": "also oneMinAvgUser, need to determine how that should be factored in"
        },
        "memory": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/sys/memory::sys/memory/memory-host",
            "normalization": [
                {
                    "runFunctions": [
                        { "name": "getPercentFromKeys", "args": { "totalKey": "memoryTotal", "partialKey": "memoryUsed", "nestedObjects": true } }
                    ]
                }
            ]
        },
        "tmmCpu": {
            "structure": { "parentKey": "system" },
            "key": "tmmInfo",
            "normalization": [
                {
                    "runFunctions": [{ "name": "getAverage", "args": { "keyWithValue": "oneMinAvgUsageRatio" } }]
                }
            ]
        },
        "tmmMemory": {
            "structure": { "parentKey": "system" },
            "key": "/mgmt/tm/sys/memory::sys/memory/memory-host",
            "normalization": [
                {
                    "runFunctions": [
                        { "name": "getPercentFromKeys", "args": { "totalKey": "tmmMemoryTotal", "partialKey": "tmmMemoryUsed", "nestedObjects": true } }
                    ]
                }
            ]
        },
        "tmmTraffic": {
            "structure": { "parentKey": "system" },
            "key": "tmmTraffic",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "clientSideTraffic.pktsIn", "clientSideTraffic.pktsOut", "serverSideTraffic.pktsIn", "serverSideTraffic.pktsOut", "clientSideTraffic.curConns", "clientSideTraffic.evictedConns", "clientSideTraffic.maxConns", "clientSideTraffic.slowKilled", "clientSideTraffic.totConns", "cmpConnRedirected", "connectionMemoryErrors", "droppedPackets", "httpRequests", "incomingPacketErrors", "licenseDeny", "maintenanceModeDeny", "maxConnVirtualAddressDeny", "maxConnVirtualPathDeny", "noHandlerDeny", "noStagedHandlerDeny", "outgoingPacketErrors", "serverSideTraffic.curConns","serverSideTraffic.evictedConns", "serverSideTraffic.maxConns", "serverSideTraffic.slowKilled", "serverSideTraffic.totConns", "tmmId", "virtualServerNonSynDeny"] }
                },
                {
                    "renameKeys": { "patterns": { "sys/tmm-traffic": { "pattern": "([0-9]\\.[0-9])" } } }
                },
                {
                    "runFunctions": [{ "name": "getSum", "args": {} }]
                }
            ]
        },
        "diskStorage": {
            "structure": { "parentKey": "system" },
            "key": "diskStorage::commandResult",
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "Mounted", "filterKeys": { "include": [ "/", "Capacity", "1024-blocks" ] } } }]
                }
            ]
        },
        "diskLatency": {
            "structure": { "parentKey": "system" },
            "key": "diskLatency::commandResult",
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "Device:", "filterKeys": { "exclude": [ "Device:", "await", "r_await", "w_await", "svctm", "avgrq-sz", "avgqu-sz", "rkB/s", "wkB/s", "rsec/s", "wsec/s", "rrqm/s", "wrqm/s" ] }, "renameKeys": { "patterns": { "rsec/s": { "constant": "rkB/s" }, "wsec/s": { "constant": "wkB/s" } } } } }]
                }
            ],
            "comment": "14.1+ uses wkB/s instead of wsec/s, equivalent for read.  Ignore both for now."
        },
        "networkInterfaces": {
            "structure": { "parentKey": "system" },
            "key": "networkInterfaces",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "counters.errorsAll", "counters.dropsAll", "counters.pktsIn", "counters.pktsOut", "mediaActive", "tmName" ] }
                },
                {
                    "renameKeys": { "patterns": { "net/interface": { "pattern": "([0-9]\\.[0-9]|(?!\/)mgmt(?=\/))" } } }
                }
            ]
        },
        "provisioning": {
            "structure": { "parentKey": "system" },
            "key": "provisioning::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "name", "keyNamePrefix": "name/" }
                },
                {
                    "filterKeys": { "exclude": [ "kind", "fullPath", "generation", "selfLink", "cpuRatio", "memoryRatio", "diskRatio" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 } } }
                }
            ]
        },
        "asmState": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "asm"
            },
            "then": {
                "key": "asmQuery::commandResult",
                "normalization": [
                    {
                        "runFunctions": [
                            { "name": "formatAsJson", "args": { "type": "csv", "mapKey": "asm_state" } },
                            { "name": "getFirstKey" }
                        ]
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "lastAsmChange": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "asm"
            },
            "then": {
                "key": "asmQuery::commandResult",
                "normalization": [
                    {
                        "runFunctions": [
                            { "name": "formatAsJson", "args": { "type": "csv", "mapKey": "last_asm_change", "renameKeys": { "patterns": { "NULL": { "constant": "" } } } } },
                            { "name": "getFirstKey" }
                        ]
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "apmState": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "apm"
            },
            "then": {
                "key": "apmState::commandResult",
                "normalization": [
                    {
                        "runFunctions": [
                            { "name": "formatAsJson", "args": { "type": "csv", "mapKey": "apm_state", "renameKeys": { "patterns": { "NULL": { "constant": "" } } } } },
                            { "name": "getFirstKey" }
                        ]
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "afmState": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "afm"
            },
            "then": {
                "key": "firewallCurrentState::pccdStatus",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "lastAfmDeploy": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "afm"
            },
            "then": {
                "key": "firewallCurrentState::ruleDeployEndTimeFmt",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "ltmConfigTime": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "ltm"
            },
            "then": {
                "key": "ltmConfigTime::value"
            },
            "else": {
                "disabled": true
            }
        },
        "gtmConfigTime": {
            "structure": { "parentKey": "system" },
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "gtmConfigTime::value"
            },
            "else": {
                "disabled": true
            }
        },
        "aWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "aWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "aaaaWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "aaaaWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "cnameWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "cnameWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "mxWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "mxWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "naptrWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "naptrWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "srvWideIps": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "srvWideIps::items",
                "normalization": [
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "skipWhenKeyMissing": true }
                    },
                    {
                        "includeFirstEntry": { "pattern": "/stats" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "wipName", "rulesReference", "nameReference" ] }
                    },
                    {
                        "runFunctions": [ { "name": "restructureGslbWideIp" } ]
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "aPools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "aPools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ] }
                    },
                    {
                        "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "gtm/pool/a/": { "pattern": "gtm\/pool\/a\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "aaaaPools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "aaaaPools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ]  }
                    },
                    {
                        "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "gtm/pool/aaaa/": { "pattern": "gtm\/pool\/aaaa\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "cnamePools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "cnamePools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ]  }
                    },
                    {
                        "convertArrayToMap": { "keyName": "fullPath", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns":  { "name/": { "pattern": "name\/(.*)", "group": 1 }, "%20:": { "pattern": "%20:(.*)/stats", "group": 1 }, "gtm/pool/cname/": { "pattern": "gtm\/pool\/cname\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "mxPools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "mxPools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ]  }
                    },
                    {
                        "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "%20:": { "pattern": "%20:(.*)/stats", "group": 1 }, "gtm/pool/mx/": { "pattern": "gtm\/pool\/mx\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "naptrPools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "naptrPools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ]  }
                    },
                    {
                        "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "%20:": { "pattern": "%20:(.*)/stats", "group": 1 }, "gtm/pool/naptr/": { "pattern": "gtm\/pool\/naptr\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "srvPools": {
            "if": {
                "isModuleProvisioned": "gtm"
            },
            "then": {
                "key": "srvPools::items",
                "normalization": [
                    {
                        "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/", "runFunctions": [ {"name": "restructureGslbPool" } ]  }
                    },
                    {
                        "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                    },
                    {
                        "filterKeys": { "exclude": [ "fullPath", "generation", "tmName" ] }
                    },
                    {
                        "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "%20:": { "pattern": "%20:(.*)/stats", "group": 1 }, "gtm/pool/srv/": { "pattern": "gtm\/pool\/srv\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                    },
                    {
                        "addKeysByTag": true
                    }
                ]
            },
            "else": {
                "disabled": true
            }
        },
        "virtualServers": {
            "key": "virtualServers::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "fullPath", "keyNamePrefix": "name/" }
                },
                {
                    "includeFirstEntry": { "pattern": "/stats"}
                },
                {
                    "filterKeys": { "exclude": [ "fullPath", "generation", "appServiceReference", "tmName", "status.statusReason", "cmpEnabled", "cmpEnableMode", "csMaxConnDur", "csMeanConnDur", "csMinConnDur", "totRequests", "oneMinAvgUsageRatio", "clientside.pktsIn", "clientside.pktsOut", "clientside.evictedConns", "clientside.slowKilled", "clientside.maxConns", "clientside.totConns", "ephemeral.bitsIn", "ephemeral.bitsOut", "ephemeral.curConns", "ephemeral.evictedConns", "ephemeral.maxConns", "ephemeral.pktsIn", "ephemeral.pktsOut", "ephemeral.slowKilled", "ephemeral.totConns", "fiveSecAvgUsageRatio", "fiveMinAvgUsageRatio", "syncookieStatus", "syncookie.accepts", "syncookie.hwAccepts", "syncookie.hwSyncookies", "syncookie.rejects", "syncookie.hwsyncookieInstance", "syncookie.swsyncookieInstance", "syncookie.syncacheCurr", "syncookie.syncacheOver", "syncookie.syncookies", "syncookie.syncacheOver", "poolReference" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "ltm/virtual": { "pattern": "virtual\/(.*)\/", "group": 1 }, "profilesReference": "profiles" } }
                },
                {
                    "addKeysByTag": true
                },
                {
                    "runFunctions": [
                        { "name": "restructureVirtualServerProfiles" }
                    ]
                }
            ]
        },
        "pools": {
            "key": "pools::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                },
                {
                    "includeFirstEntry": { "pattern": "/stats", "excludePattern": "/members/" }
                },
                {
                    "filterKeys": { "exclude": [ "tmName", "availableMemberCnt", "sessionStatus", "status.statusReason", "connqAll.ageEdm", "connqAll.ageEma", "connqAll.ageHead", "connqAll.ageMax", "connqAll.depth", "connqAll.serviced", "connq.ageEdm", "connq.ageEma", "connq.ageHead", "connq.ageMax", "connq.depth", "connq.serviced", "curSessions", "memberCnt", "minActiveMembers", "monitorRule", "serverside.pktsIn", "serverside.pktsOut", "serverside.maxConns", "serverside.totConns", "totRequests", "ipTosToServer", "minUpMembersAction", "appService", "appServiceReference", "minUpMembersChecking", "kind","ignorePersistedWeight", "fullPath", "partition", "linkQosToClient", "linkQosToServer", "ipTosToClient", "generation", "serviceDownAction", "queueDepthLimit", "queueTimeLimit", "allowNat", "reselectTries", "minUpMembers", "monitorStatus", "nodeName", "poolName", "allowSnat", "monitor", "selfLink", "subPath", "queueOnConnectionLimit", "loadBalancingMode", "slowRampTime" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "ltm/pool/": { "pattern": "pool\/(.*)\\?", "group": 1 } , "members/": { "pattern": "members\/(.*)\/", "group": 1 }, "membersReference": "members" } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "ltmPolicies": {
            "key": "ltmPolicies",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "policyName", "vsName", "action", "actionId", "ruleName", "tmTarget" ] }
                },
                {
                    "renameKeys": { "patterns": [ { "ltm/policy/": { "pattern": "policy\/(.*)\/", "group": 1 }, "/actions/": { "pattern": "actions\/(.*)", "group": 1 } }, { "/actions": { "constant": "actions" } } ] }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "httpProfiles": {
            "key": "httpProfiles",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "tmName", "passthroughConnect", "passthroughExcessClientHeaders", "passthroughExcessServerHeaders", "passthroughHeaders", "passthroughIrule", "passthroughOversizeClientHeaders", "passthroughOversizeServerHeaders", "passthroughPipeline", "passthroughUnknownMethod", "passthroughWebSockets", "proxyConnReqs", "proxyReqs", "respBucket_128k", "respBucket_16k", "respBucket_1k", "respBucket_32k", "respBucket_4k", "respBucket_512k", "respBucket_64k", "typeId","vsName" ] }
                },
                {
                    "renameKeys": { "patterns": { "ltm/profile/http/": { "pattern": "http\/(.*)\/", "group": 1 } } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "clientSslProfiles": {
            "key": "clientSslProfiles",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "common.aggregateRenegotiationsRejected", "common.badRecords", "common.c3dUses.conns", "common.cipherUses.adhKeyxchg", "common.cipherUses.aesBulk", "common.cipherUses.aesGcmBulk", "common.cipherUses.camelliaBulk", "common.cipherUses.desBulk", "common.cipherUses.dhRsaKeyxchg", "common.cipherUses.dheDssKeyxchg", "common.cipherUses.ecdhEcdsaKeyxchg", "common.cipherUses.ecdhRsaKeyxchg", "common.cipherUses.ecdheEcdsaKeyxchg", "common.cipherUses.ecdheRsaKeyxchg", "common.cipherUses.edhRsaKeyxchg", "common.cipherUses.ideaBulk", "common.cipherUses.md5Digest", "common.cipherUses.nullBulk", "common.cipherUses.nullDigest", "common.cipherUses.rc2Bulk", "common.cipherUses.rc4Bulk", "common.cipherUses.rsaKeyxchg", "common.cipherUses.shaDigest", "common.connectionMirroring.haCtxRecv", "common.connectionMirroring.haCtxSent", "common.connectionMirroring.haFailure", "common.connectionMirroring.haHsSuccess", "common.connectionMirroring.haPeerReady", "common.connectionMirroring.haTimeout", "common.dtlsTxPushbacks", "common.extendedMasterSecrets", "common.fullyHwAcceleratedConns", "common.fwdpUses.alertBypasses", "common.fwdpUses.cachedCerts", "common.fwdpUses.clicertFailBypasses", "common.fwdpUses.conns", "common.fwdpUses.dipBypasses", "common.fwdpUses.enforceResumeFailures", "common.fwdpUses.hnBypasses", "common.fwdpUses.sipBypasses", "common.fwdpUses.transparentResumeCnt", "common.fwdpUses.verifiedHsCnt", "common.insecureHandshakeAccepts", "common.insecureHandshakeRejects", "common.insecureRenegotiationRejects", "common.maxCompatConns", "common.maxConns", "common.maxNativeConns", "common.midstreamRenegotiations", "common.nonHwAcceleratedConns", "common.ocspFwdpClientssl.cachedResp", "common.ocspFwdpClientssl.certStatusReq", "common.ocspFwdpClientssl.invalidCertResp", "common.ocspFwdpClientssl.respstatusErrResp", "common.ocspFwdpClientssl.revokedResp", "common.ocspFwdpClientssl.stapledResp", "common.ocspFwdpClientssl.unknownResp", "common.partiallyHwAcceleratedConns", "common.prematureDisconnects", "common.renegotiationsRejected", "common.secureHandshakes", "common.sessCacheCurEntries", "common.sessCacheHits", "common.sessCacheInvalidations", "common.sessCacheLookups", "common.sessCacheOverflows", "common.sessionMirroring.failure", "common.sessionMirroring.success", "common.sesstickUses.reuseFailed", "common.sesstickUses.reused", "common.totCompatConns", "common.totNativeConns", "dynamicRecord.x1", "dynamicRecord.x10", "dynamicRecord.x11", "dynamicRecord.x12", "dynamicRecord.x13", "dynamicRecord.x14", "dynamicRecord.x15", "dynamicRecord.x16", "dynamicRecord.x2", "dynamicRecord.x3", "dynamicRecord.x4", "dynamicRecord.x5", "dynamicRecord.x6", "dynamicRecord.x7", "dynamicRecord.x8", "dynamicRecord.x9", "activeHandshakeRejected", "tmName", "total", "typeId", "vsName" ] }
                },
                {
                    "renameKeys": { "patterns": { "ltm/profile/client-ssl/": { "pattern": "client-ssl\/(.*)\/", "group": 1 }, "common.": { "pattern": "common.(.*)", "group": 1 } } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "serverSslProfiles": {
            "key": "serverSslProfiles",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "common.badRecords", "common.c3dUses.conns", "common.cipherUses.adhKeyxchg", "common.cipherUses.aesBulk", "common.cipherUses.aesGcmBulk", "common.cipherUses.camelliaBulk", "common.cipherUses.desBulk", "common.cipherUses.dhRsaKeyxchg", "common.cipherUses.dheDssKeyxchg", "common.cipherUses.ecdhEcdsaKeyxchg", "common.cipherUses.ecdhRsaKeyxchg", "common.cipherUses.ecdheEcdsaKeyxchg", "common.cipherUses.ecdheRsaKeyxchg", "common.cipherUses.edhRsaKeyxchg", "common.cipherUses.ideaBulk", "common.cipherUses.md5Digest", "common.cipherUses.nullBulk", "common.cipherUses.nullDigest", "common.cipherUses.rc2Bulk", "common.cipherUses.rc4Bulk", "common.cipherUses.rsaKeyxchg", "common.cipherUses.shaDigest", "common.connectionMirroring.haCtxRecv", "common.connectionMirroring.haCtxSent", "common.connectionMirroring.haFailure", "common.connectionMirroring.haHsSuccess", "common.connectionMirroring.haPeerReady", "common.connectionMirroring.haTimeout",  "common.dtlsTxPushbacks", "common.extendedMasterSecrets", "common.fullyHwAcceleratedConns", "common.fwdpUses.conns", "common.fwdpUses.enforceResumeFailures", "common.fwdpUses.transparentResumeCnt", "common.insecureHandshakeAccepts", "common.insecureHandshakeRejects", "common.insecureRenegotiationRejects", "common.maxCompatConns", "common.maxConns", "common.maxNativeConns", "common.midstreamRenegotiations", "common.nonHwAcceleratedConns", "common.ocspServerssl.cachedResp", "common.ocspServerssl.certStatusRevoked", "common.ocspServerssl.certStatusUnknown", "common.ocspServerssl.responderQueries", "common.ocspServerssl.responseErrors", "common.ocspServerssl.stapledResp", "common.partiallyHwAcceleratedConns", "common.prematureDisconnects", "common.secureHandshakes", "common.sessCacheCurEntries", "common.sessCacheHits", "common.sessCacheInvalidations", "common.sessCacheLookups", "common.sessCacheOverflows", "common.sessionMirroring.failure", "common.sessionMirroring.success", "common.sesstickUses.reuseFailed", "common.sesstickUses.reused", "common.totCompatConns", "common.totNativeConns", "activeHandshakeRejected", "tmName", "typeId", "vsName" ] }
                },
                {
                    "renameKeys": { "patterns": { "ltm/profile/server-ssl/": { "pattern": "server-ssl\/(.*)\/", "group": 1 }, "common.": { "pattern": "common.(.*)", "group": 1 } } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "sslCerts": {
            "key": "sslCerts::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "name", "keyNamePrefix": "name/" }
                },
                {
                    "filterKeys": { "exclude": [ "kind", "name", "partition", "fullPath", "generation", "selfLink", "certificateKeyCurveName", "certificateKeySize", "checksum", "createTime", "createdBy", "fingerprint", "isBundle", "lastUpdateTime", "mode", "revision", "size", "systemPath", "updatedBy", "version", "bundleCertificatesReference", "certValidatorsReference", "keyType", "serialNumber", "sourcePath", "subPath", "serialNumber" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 } } }
                }
            ]
        },
        "networkTunnels": {
            "key": "networkTunnels",
            "normalization": [
                {
                    "filterKeys": { "exclude": [ "tmName", "typeId" ] }
                },
                {
                    "renameKeys": { "patterns": { "net/tunnels": { "pattern": "tunnel\/(.*)\/stats", "group": 1 } } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "deviceGroups": {
            "key": "deviceGroups::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "selfLink", "keyNamePrefix": "name/" }
                },
                {
                    "includeFirstEntry": { "pattern": "/stats" }
                },
                {
                    "filterKeys": { "exclude": [ "commitIdOriginator", "device", "devicegroup", "lastSyncType", "lssOriginator", "generation", "partition", "fullPath", "asmSync", "autoSync", "fullLoadOnSync", "incrementalConfigSyncSizeMax", "networkFailover", "saveOnAutoSync", "devicesReference" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 }, "cm/device-group/": { "pattern": "device-group\/(.*)\\?", "group": 1 } } }
                },
                {
                    "addKeysByTag": true
                }
            ]
        },
        "iRules": {
            "key": "iRules",
            "normalization": [
                {
                    "filterKeys": { "exclude": ["kind", "selfLink", "tmName"] }
                },
                {
                    "renameKeys": { "patterns": { "ltm/rule/": { "pattern": "rule\/(.*):", "group": 1 } } }
                },
                {
                    "runFunctions": [
                        { "name": "restructureRules" }
                    ]
                },
                {
                    "addKeysByTag": { "skip": ["events"] }
                }
            ]
        },
        "tmstats": {
            "structure": { "folder": true }
        },
        "asmCpuUtilStats": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c asm_cpu_util_stats" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "cpuInfoStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c cpu_info_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "diskInfoStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c disk_info_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "dnsCacheResolverStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c dns_cache_resolver_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "dnsexpressZoneStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c dnsexpress_zone_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "dosStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c dos_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "dosl7PluginStats": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c dosl7_plugin_stats" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "dosl7dStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c dosl7d_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "flowEvictionPolicyStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c flow_eviction_policy_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "context_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "gtmDcStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c gtm_dc_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "gtmWideipStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c gtm_wideip_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "hostInfoStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c host_info_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "ifcStats": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c ifc_stats" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "interfaceStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c interface_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "ipIntelligenceStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c ip_intelligence_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "ipStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c ip_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "iprepdStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c iprepd_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "kvmVcpuStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c kvm_vcpu_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "kvmVmStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c kvm_vm_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "mcpRequestStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c mcp_request_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "mcpTransactionStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c mcp_transaction_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "memoryUsageStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c memory_usage_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "monitorInstanceStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c monitor_instance_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "monitorStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c monitor_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "poolMemberStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c pool_member_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "pool_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "poolStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c pool_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "procPidStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c proc_pid_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "profileBigprotoStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_bigproto_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileClientsslStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_clientssl_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileConnpoolStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_connpool_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileDnsStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_dns_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileFtpStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_ftp_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileHttpStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_http_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileHttpcompressionStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_httpcompression_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileServersslStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_serverssl_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileTcpStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_tcp_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileUdpStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_udp_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "profileWebaccelerationStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c profile_webacceleration_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "vs_name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "ruleStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c rule_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "tmmStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c tmm_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "tmmdnsServerStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c tmmdns_server_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "tmmdnsZoneStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c tmmdns_zone_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "vcmpGlobalStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c vcmp_global_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "vcmpStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c vcmp_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv" } }]
                }
            ]
        },
        "virtualServerConnStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c virtual_server_conn_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "$comment": "can't dump table on 12.0+" } }]
                }
            ]
        },
        "virtualServerCpuStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c virtual_server_cpu_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        },
        "virtualServerStat": {
            "structure": { "parentKey": "tmstats" },
            "key": "tmctl::commandResult",
            "keyArgs": { "replaceStrings": { "\\$tmctlArgs": "-c virtual_server_stat" } },
            "normalization": [
                {
                    "runFunctions": [{ "name": "formatAsJson", "args": { "type": "csv", "mapKey": "name" } }]
                },
                {
                    "addKeysByTag": { "tags": { "tenant": "`T`", "application": "`A`" } }
                },
                {
                    "runFunctions": [{ "name": "convertMapToArray" }]
                }
            ]
        }
    },
    "events": {
        "classifyByKeys": [ "virtual_name", "policy_name", "Access_Profile", "context_name", "vip", "pool_name" ],
        "classifyCategoryByKeys": {
            "AVR": { "keys": [ { "required": [ "EOCTimestamp" ], "optional": [ "AggrInterval", "Microtimestamp", "STAT_SRC", "Entity", "errdefs_msgno" ] } ] },
            "ASM": { "keys": [ { "required": [ "policy_name" ], "optional": [ "policy_apply_date", "request_status" ] } ] },
            "APM": { "keys": [ { "required": [ "Access_Profile" ] } ] },
            "AFM": { "keys": [
                { "required": [ "acl_policy_name" ], "optional": [ "acl_policy_type", "acl_rule_name" ] },
                { "required": [ "dos_attack_id" ], "optional": [ "flow_id", "action", "errdefs_msg_name" ] }
            ]},
            "CGNAT": { "keys": [ { "required": [ "lsn_event" ], "optional": [ "lsn_client", "lsn_pb", "start" ] } ] }
       }
    },
    "ihealth": {
        "filterKeys": { "exclude": [ "name", "output", "match" ] },
        "renameKeys": {
            "patterns": {
                "h_importance": { "constant": "importance" },
                "h_action": { "constant": "action" },
                "h_name": { "constant": "name" },
                "h_cve_ids": { "constant": "cveIds" },
                "h_header": { "constant": "header" },
                "h_summary": { "constant": "summary" }
            },
            "options": {
                "exactMatch": true
            }
        }
    },
    "context": {
        "HOSTNAME": {
            "key": "deviceInfo::hostname"
        },
        "BASE_MAC_ADDR": {
            "key": "deviceInfo::baseMac",
            "normalization": [
                {
                    "runFunctions": [{ "name": "normalizeMACAddress" }]
                }
            ]
        },
        "deviceVersion": {
            "key": "deviceInfo::version"
        },
        "provisioning": {
            "key": "provisioning::items",
            "normalization": [
                {
                    "convertArrayToMap": { "keyName": "name", "keyNamePrefix": "name/" }
                },
                {
                    "filterKeys": { "include": [ "name", "level" ] }
                },
                {
                    "renameKeys": { "patterns": { "name/": { "pattern": "name\/(.*)", "group": 1 } } }
                }
            ]
        }
    },
    "global": {
        "addKeysByTag": { "skip": [ "actions", "members" ] },
        "renameKeys": {
            "patterns": {
                "~": { "replaceCharacter": "/", "exactMatch": false },
                "unit_hostname": { "constant": "hostname" },
                "EOCtimestamp": { "constant": "EOCTimestamp" },
                "Hostname": { "constant": "hostname" },
                "BIGIP_HOSTNAME": { "constant": "hostname" },
                "status.availabilityState": { "constant": "availabilityState" },
                "status.enabledState": { "constant": "enabledState" },
                "resp_2xxCnt": { "constant": "2xxResp" },
                "resp_3xxCnt": { "constant": "3xxResp" },
                "resp_4xxCnt": { "constant": "4xxResp" },
                "resp_5xxCnt": { "constant": "5xxResp" },
                "respBucket_2m": { "constant": "respLessThan2m" },
                "respBucketLarge": { "constant": "respGreaterThan2m" },
                "curConns": { "constant": "currentConnections" },
                "curNativeConns": { "constant": "currentNativeConnections" },
                "curCompatConns": { "constant": "currentCompatibleConnections" }
            },
            "options": {
                "exactMatch": true
            }
        },
        "filterKeys": { "exclude": [ "kind", "selfLink" ] },
        "formatTimestamps": { "keys": [ "timestamp", "event_timestamp", "date_time", "systemTimestamp", "expirationString", "commitIdTime", "lssTime", "lastAsmChange", "lastAfmDeploy", "ltmConfigTime", "gtmConfigTime" ] }
    },
    "definitions": {
        "`T`": { "pattern": "\/(.*?)\/", "group": 1 },
        "`A`": { "pattern": "\/(.*?)\/(.*?)\/", "group": 2 }
    }
}
